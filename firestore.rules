/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - /users/{userId}/profile: User profile information.
 * - /users/{userId}/settings: User-specific settings.
 * - /transactions/{userId}/{transactionId}: Blockchain transactions for a user.
 * - /notifications/{userId}/{notificationId}: User notifications.
 *
 * Key Security Decisions:
 * - All data is nested under the /users/{userId} path and is only accessible to the authenticated user with a matching UID.
 * - Listing of user profiles and settings is allowed only for the owner.
 * - Listing of transactions and notifications is allowed only for the owner.
 * - No public data or roles are defined.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}/profile
     * @allow (get, create, update, delete, list) - User A with UID "user_abc" can access /users/user_abc/profile.
     * @deny (get, create, update, delete, list) - User A with UID "user_abc" cannot access /users/user_xyz/profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/profile {
      // Helper function to check if the request is made by the owner of the user profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      // Helper function to check if the document exists and the user is the owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read the profile if they are signed in and are the owner of the profile.
      allow get: if isOwner(userId);

      // Allow listing profiles for the authenticated owner.
      allow list: if isOwner(userId);

      // Allow creating a profile if signed in and the user ID matches the document ID.
      allow create: if isOwner(userId);

      // Allow updating a profile if the user is the owner and the document exists.
      allow update: if isExistingOwner(userId);

      // Allow deleting a profile if the user is the owner and the document exists.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user settings, allowing only the owner to read and write.
     * @path /users/{userId}/settings
     * @allow (get, create, update, delete, list) - User A with UID "user_abc" can access /users/user_abc/settings.
     * @deny (get, create, update, delete, list) - User A with UID "user_abc" cannot access /users/user_xyz/settings.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settings {
      // Helper function to check if the request is made by the owner of the user settings.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
            
      // Helper function to check if the document exists and the user is the owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read the settings if they are signed in and are the owner of the settings.
      allow get: if isOwner(userId);

      // Allow listing settings for the authenticated owner.
      allow list: if isOwner(userId);

      // Allow creating settings if signed in and the user ID matches the document ID.
      allow create: if isOwner(userId);

      // Allow updating settings if the user is the owner and the document exists.
      allow update: if isExistingOwner(userId);

      // Allow deleting settings if the user is the owner and the document exists.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user transactions, allowing only the owner to read and write.
     * @path /transactions/{userId}/{transactionId}
     * @allow (get, create, update, delete, list) - User A with UID "user_abc" can access /transactions/user_abc/{transactionId}.
     * @deny (get, create, update, delete, list) - User A with UID "user_abc" cannot access /transactions/user_xyz/{transactionId}.
     * @principle Enforces document ownership for all operations.
     */
    match /transactions/{userId}/{transactionId} {
      // Helper function to check if the request is made by the owner of the transaction.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      // Helper function to check if the document exists and the user is the owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow anyone to read the transaction if they are signed in and are the owner of the transaction.
      allow get: if isOwner(userId);

      // Allow listing transactions for the authenticated owner.
      allow list: if isOwner(userId);

      // Allow creating a transaction if signed in and the user ID matches the document ID.
      allow create: if isOwner(userId);

      // Allow updating a transaction if the user is the owner and the document exists.
      allow update: if isExistingOwner(userId);

      // Allow deleting a transaction if the user is the owner and the document exists.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user notifications, allowing only the owner to read and write.
     * @path /notifications/{userId}/{notificationId}
     * @allow (get, create, update, delete, list) - User A with UID "user_abc" can access /notifications/user_abc/{notificationId}.
     * @deny (get, create, update, delete, list) - User A with UID "user_abc" cannot access /notifications/user_xyz/{notificationId}.
     * @principle Enforces document ownership for all operations.
     */
    match /notifications/{userId}/{notificationId} {
      // Helper function to check if the request is made by the owner of the notification.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the document exists and the user is the owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
            
      // Allow anyone to read the notification if they are signed in and are the owner of the notification.
      allow get: if isOwner(userId);

      // Allow listing notifications for the authenticated owner.
      allow list: if isOwner(userId);

      // Allow creating a notification if signed in and the user ID matches the document ID.
      allow create: if isOwner(userId);

      // Allow updating a notification if the user is the owner and the document exists.
      allow update: if isExistingOwner(userId);

      // Allow deleting a notification if the user is the owner and the document exists.
      allow delete: if isExistingOwner(userId);
    }
  }
}